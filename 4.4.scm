(define (and? exp) (targged-list? exp 'and))
(define (and-operands exp) (operands exp))
(define (eval-and exp env)
  (define (iter ops env)
    (if (true? (eval (car ops) env))
        (eval-and (cdr ops) env)
        false))
  (iter (and-operands exp) env))


(define (or? exp) (targged-list? exp 'or))
(define (or-operands exp) (operors exp))
(define (eval-or exp env)
  (define (iter ops env)
    (if (false? (eval (car ops) env))
        (eval-or (cdr ops) env)
        true))
  (iter (or-operors exp) env))

(define (and->cond exp)
  (define (iter ops)
    (if (null? ops)
        (list 'else 'true)
        (cons (list (list 'not (car ops)) 'false)
              (iter (cdr ops)))))
  (cons 'cond (iter (and-operands exp))))

(define (or->cond exp)
  (define (iter ops)
    (if (null? ops)
        (list 'else 'false)
        (cons (list (car ops) 'true)
              (iter (cdr ops)))))
  (cons 'cond (iter (or-operands exp))))
