(define (make-tree entry left right) (list entry left right))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))

(define (make-record key data) (cons key data))
(define (key record) (car record))
(define (data record) (cdr record))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elts)
  (define (partial-tree elts n)
    (if (= n 0)
        (cons '() elts)
        (let* ((left-size (quotient (- n 1) 2))
               (left-result (partial-tree elts left-size))
               (left-tree (car left-result))
               (non-left-elts (cdr left-result))
               (this-entry (car non-left-elts))
               (right-size (- n (+ left-size 1)))
               (right-result (partial-tree (cdr non-left-elts) right-size))
               (right-tree (car right-result))
               (remaining-elts (cdr right-result)))
          (cons (make-tree this-entry
                           left-tree
                           right-tree)
                remaining-elts))))
  (car (partial-tree elts (length elts))))

(define (lookup k records)
  (let* ((this-record (entry records))
        (this-key (key this-record)))
    (cond ((= k this-key) this-record)
          ((< k this-key) (lookup k (left-branch records)))
          ((> k this-key) (lookup k (right-branch records))))))

(lookup 4 (list->tree (list (make-record 1 "apple")
                            (make-record 2 "banana")
                            (make-record 3 "color")
                            (make-record 4 "dog")
                            (make-record 5 "egg"))))
